#+title: GNU Emacs Configuration
#+STARTUP: fold

I'ts written using [[https://invidious.lunar.icu/playlist?list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX][DistroTube's emacs configuring YouTube videos]] and [[https://systemcrafters.net/emacs-from-scratch/][System Crafters' "Emacs From Scratch" series]].
At 4th video at 26:09

* TABLE OF CONTENTS :toc:
- [[#sane-defaults-and-other][SANE DEFAULTS (and other)]]
- [[#package-management-setup][PACKAGE MANAGEMENT SETUP]]
- [[#evil-and-keybindings][EVIL AND KEYBINDINGS]]
- [[#all-the-icons][ALL-THE-ICONS]]
- [[#beacon][BEACON]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#company][COMPANY]]
- [[#dired][DIRED]]
- [[#dashboard][DASHBOARD]]
- [[#doom-modeline][DOOM-MODELINE]]
- [[#emojis][EMOJIS]]
- [[#fonts][FONTS]]
- [[#flycheck][FLYCHECK]]
- [[#git-stuff][GIT STUFF]]
- [[#helpful][HELPFUL]]
- [[#imenu-list][IMENU LIST]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#shell][Shell]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#fixing-keybindings-and-evil-mode][FIXING KEYBINDINGS AND EVIL MODE]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-superstar][ORG SUPERSTAR]]
  - [[#org-auto-tangle][ORG AUTO TANGLE]]
  - [[#toc][TOC]]
  - [[#other-tweaks][OTHER TWEAKS]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme-ewal][THEME (EWAL)]]
- [[#tldr][TLDR]]
- [[#which-key][WHICH-KEY]]

* SANE DEFAULTS (and other)
Here are some tweaks that idk where to put
#+begin_src emacs-lisp
(setq inhibit-startup-message t) ; default emacs startup message
(scroll-bar-mode -1)             ; Disable visible scrollbar
(tool-bar-mode -1)               ; Disable the toolbar
(tooltip-mode -1)                ; Disable tooltips
(set-fringe-mode 10)             ; Give some breathing room
(menu-bar-mode -1)               ; Disable the menu bar
(global-auto-revert-mode t)      ; Automatically show changes if the file has changed
(setq global-auto-revert-non-file-buffers t) ; refreshing buffers when files have changed
(global-visual-line-mode t)      ; Enable truncated lines
(setq use-dialog-box nil)        ; turns off graphical dialog boxes
(delete-selection-mode 1)        ; You can select text and delete it by typing.
(electric-pair-mode 1)           ; Turns on automatic parens pairing
(electric-indent-mode -1)        ; Turn off the weird indenting that Emacs does by default.
(column-number-mode)
(global-display-line-numbers-mode t)
;; Set up the visible bell
(setq visible-bell nil)
;; Make ESC quit prompts immediately
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; custom settings that emacs autosets put into it's own file
(setq custom-file (concat user-emacs-directory "custom.el"))
;; moving backup files to trash directory
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
;; recentf file put somewhere else
(setq recentf-save-file "~/.local/share/emacs/recentf")
;; bookmarks file put somewhere else
(setq bookmark-dafault-file "~/.local/share/emacs/bookmarks")
;; tramp file put somewhere else
(setq tramp-persistency-file-name "~/.local/share/emacs/tramp")
;; turn off line numbers in certain modes
(dolist (mode '(neotree-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

;; locking buffers from killing
(with-current-buffer "*scratch*" 
	  (emacs-lock-mode 'kill))
(with-current-buffer "*Messages*"
	  (emacs-lock-mode 'kill))
#+end_src

* PACKAGE MANAGEMENT SETUP
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-user-dir "~/.local/share/emacs/packages/"
      package-async t
      package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t
      use-package-verbose t)
#+end_src

#+begin_src emacs-lisp
(use-package command-log-mode
  :disabled)
#+end_src

* EVIL AND KEYBINDINGS
I love [[https://github.com/doomemacs/doomemacs][Doom Emacs]] so I set up evil mode.
#+begin_src emacs-lisp
;;(defun custom/evil-hook ()
;;  (dolist (mode '(custom-mode
;;                  eshell-mode
;;                  git-rebase-mode
;;                  erc-mode
;;                  circe-server-mode
;;                  circe-chat-mode
;;                  circe-query-mode
;;                  sauron-mode
;;                  term-mode))
;;   (add-to-list 'evil-emacs-state-modes mode)))


(use-package evil
  :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
	  evil-want-C-u-scroll t
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode)
  :config
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (dolist (mode '(eshell-mode
                    term-mode
                    vterm-mode))
    (add-to-list 'evil-emacs-state-modes mode)))


(use-package evil-collection
  :after evil
  :config
    ;; Do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  The following line is here 
    ;; for documentation purposes in case you need it.  
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))

(use-package general
  :config
  (general-evil-setup)

;; Ctrl+r (which does redo functionality) didn't work so I fixed it
;;(define-key evil-normal-state-map (kbd "C-r") 'undo-redo)

;; Ctrl+u (which is page up) also didn't work
;;(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

;; set up 'SPC' as the global leader key
(general-create-definer custom/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader
  :global-prefix "M-SPC") ;; access leader in insert mode

(custom/leader-keys
  "SPC" '(projectile-find-file :wk "Find file in project")
  "." '(find-file :wk "Find file")
  "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
  "TAB TAB" '(comment-line :wk "Comment lines")
  "u" '(universal-argument :wk "Universal argument"))

(custom/leader-keys
  "b" '(:ignore t :wk "Bookmarks/Buffers")
  "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
  "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
  "b d" '(bookmark-delete :wk "Delete bookmark")
  "b i" '(ibuffer :wk "Ibuffer")
  "b I" '(counsel-switch-buffer-other-window :wk "Switch buffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b K" '(kill-some-buffers :wk "Kill multiple buffers")
  "b l" '(list-bookmarks :wk "List bookmarks")
  "b m" '(bookmark-set :wk "Set bookmark")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer")
  "b R" '(rename-buffer :wk "Rename buffer")
  "b s" '(basic-save-buffer :wk "Save buffer")
  "b S" '(save-some-buffers :wk "Save multiple buffers")
  "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

(custom/leader-keys
  "RET" '(bookmark-jump :wk "Go to bookmark"))

(custom/leader-keys
  "d" '(:ignore t :wk "Dired")
  "d d" '(dired :wk "Open dired")
  "d j" '(dired-jump :wk "Dired jump to current")
  "d n" '(neotree-dir :wk "Open directory in neotree")
  "d p" '(peep-dired :wk "Peep-dired"))

(custom/leader-keys
  "e" '(:ignore t :wk "Eshell/Evaluate")
  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  "e e" '(eval-expression :wk "Evaluate and elisp expression")
  "e h" '(counsel-esh-history :wk "Eshell history")
  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  "e r" '(eval-region :wk "Evaluate elisp in region")
  "e s" '(eshell :wk "Eshell"))

(custom/leader-keys
  "f" '(:ignore t :wk "Files")
  "f c" '((lambda () (interactive)
            (find-file "~/.config/emacs/config.org"))
          :wk "Open emacs config.org")
  "f e" '((lambda () (interactive)
            (dired "~/.config/emacs/"))
          :wk "Open user-emacs-directory in dired")
  "f d" '(find-grep-dired :wk "Search for string in files in DIR")
  "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
  "f i" '((lambda () (interactive)
            (find-file "~/.config/emacs/init.el"))
          :wk "Open emacs init.el")
  "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
  "f l" '(counsel-locate :wk "Locate a file")
  "f p" '(counsel-find-file (user-emacs-directory) :wk "Config directory")
  "f r" '(counsel-recentf :wk "Find recent files")
  "f u" '(sudo-edit-find-file :wk "Sudo find file")
  "f U" '(sudo-edit :wk "Sudo edit file"))

(custom/leader-keys
  "g" '(:ignore t :wk "Git")
  "g /" '(magit-displatch :wk "Magit dispatch")
  "g ." '(magit-file-displatch :wk "Magit file dispatch")
  "g b" '(magit-branch-checkout :wk "Switch branch")
  "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
  "g C" '(magit-clone :wk "Clone repo")
  "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
  "g F" '(magit-fetch :wk "Git fetch")
  "g g" '(magit-status :wk "Magit status")
  "g i" '(magit-init :wk "Initialize git repo")
  "g l" '(magit-log-buffer-file :wk "Magit buffer log")
  "g r" '(vc-revert :wk "Git revert file")
  "g s" '(magit-stage-file :wk "Git stage file")
  "g t" '(git-timemachine :wk "Git time machine")
  "g u" '(magit-stage-file :wk "Git unstage file"))

(custom/leader-keys
  "h" '(:ignore t :wk "Help")
  "h a" '(counsel-apropos :wk "Apropos")
  "h b" '(describe-bindings :wk "Describe bindings")
  "h c" '(describe-char :wk "Describe character under cursor")
  "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
  "h e" '(view-echo-area-messages :wk "View echo area messages")
  "h f" '(describe-function :wk "Describe function")
  "h F" '(describe-face :wk "Describe face")
  "h g" '(describe-gnu-project :wk "Describe GNU Project")
  "h i" '(info :wk "Info")
  "h I" '(describe-input-method :wk "Describe input method")
  "h k" '(describe-key :wk "Describe key")
  "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
  "h L" '(describe-language-environment :wk "Describe language environment")
  "h m" '(describe-mode :wk "Describe mode")
  "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
    "h r t" '((lambda () (interactive) (load-theme real-theme t)) :wk "Reload theme")
  "h t" '(load-theme :wk "Load theme")
  "h v" '(describe-variable :wk "Describe variable")
  "h w" '(where-is :wk "Prints keybinding for command if set")
  "h x" '(describe-command :wk "Display full documentation for command"))
    
(custom/leader-keys
  "m" '(:ignore t :wk "Org")
  "m a" '(org-agenda :wk "Org agenda")
  "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table")
    "m b a" '(org-table-align :wk "Align table")
    "m b b" '(org-table-blank-field :wk "Make blank field")
    "m b c" '(org-table-create-or-convert-from-region :wk "Create/Convert from region")
    "m b e" '(org-table-edit-field :wk "Edit field")
    "m b f" '(org-table-edit-formulas :wk "Edit fromulas")
    "m b h" '(org-table-field-info :wk "Field info")
    "m b s" '(org-table-sort-lines :wk "Sort lines")
    "m b r" '(org-table-recalculate :wk "Recalculate")
    "m b R" '(org-table-recalculate-buffer-tables :wk "Recalculate buffer tables")
    "m b d" '(:ignore t :wk "delete")
      "m b d c" '(org-table-delete-column :wk "Delete column")
      "m b d r" '(org-table-kill-row :wk "Delete row")
    "m b i" '(:ignore t :wk "insert")
      ;; "m b i c" ('org-table-insert-column :wk "Insert column") FIXME
      ;; "m b i h" ('org-table-insert-hline :wk "Insert horizontal line") FIXME
      ;; "m b i r" ('org-table-insert-row :wk "Insert row") FIXME
      ;; "m b i H" ('org-table-hline-and-move :wk "Insert horizontal line and move") FIXME
  "m d" '(:ignore t :wk "Date/deadline")
    "m d d" '(org-deadline :wk "Org deadline")
    "m d s" '(org-schedule :wk "Org schedule")
    "m d t" '(org-time-stamp :wk "Org time stamp")
    "m d T" '(org-time-stamp-inactive :wk "Org time stamp inactive")
  "m e" '(org-export-dispatch :wk "Org export dispatch")
  "m i" '(org-toggle-item :wk "Org toggle item")
  "m l" '(:ignore t :wk "Link")
    "m l l" '(org-insert-link :wk "Insert link")
  "m t" '(org-todo :wk "Org todo")
  "m B" '(org-babel-tangle :wk "Org babel tangle")
  "m T" '(org-todo-list :wk "Org todo list"))

(custom/leader-keys
  "o" '(:ignore t :wk "Open")
  "o d" '(dashboard-open :wk "Dashboard")
  "o e" '(elfeed :wk "Elfeed RSS")
  "o f" '(make-frame :wk "Open buffer in new frame")
  "o F" '(select-frame-by-name :wk "Select frame by name"))

(custom/leader-keys
  "p" '(projectile-command-map :wk "Projectile"))

(custom/leader-keys
  "s" '(:ignore t :wk "Search")
  "s d" '(dictionary-search :wk "Search dictionary")
  "s m" '(man :wk "Man pages")
  "s t" '(tldr :wk "Lookup TLDR docs for a command")
  "s w" '(woman :wk "Similar to man but doesn't require man"))

(custom/leader-keys
  "t" '(:ignore t :wk "Toggle")
  "t e" '(eshell-toggle :wk "Toggle eshell")
  "t f" '(flycheck-mode :wk "Toggle flycheck")
  "t i" '(imenu-list-smart-toggle :wk "Toggle imenu list")
  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  "t n" '(neotree-toggle :wk "Toggle neotree")
  "t r" '(rainbow-mode :wk "Toggle rainbow mode")
  "t t" '(visual-line-mode :wk "Toggle truncated lines")
  "t v" '(vterm-toggle :wk "Toggle vterm"))

(custom/leader-keys
  "w" '(:ignore t :wk "Windows")
  ;; Window splits
  "w c" '(evil-window-delete :wk "Close window")
  "w n" '(evil-window-new :wk "New window")
  "w s" '(evil-window-split :wk "Horizontal split window")
  "w v" '(evil-window-vsplit :wk "Vertical split window")
  ;; Window motions
  "w h" '(evil-window-left :wk "Window left")
  "w j" '(evil-window-down :wk "Window down")
  "w k" '(evil-window-up :wk "Window up")
  "w l" '(evil-window-right :wk "Window right")
  "w w" '(evil-window-next :wk "Go to next window")
  ;; Move Windows
  "w H" '(buf-move-left :wk "Buffer move left")
  "w J" '(buf-move-down :wk "Buffer move down")
  "w K" '(buf-move-up :wk "Buffer move up")
  "w L" '(buf-move-right :wk "Buffer move right"))
)

;; text resizing
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
* ALL-THE-ICONS
All the icons and nerd icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :defer t
  :after dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

(use-package all-the-icons-ibuffer
  :after ibuffer
  :hook (ibuffer-mode . (lambda () (all-the-icons-ibuffer-mode t))))

(use-package nerd-icons)

(use-package all-the-icons-ivy-rich
  :ensure t
  :after ivy
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src

* BEACON
[[https://github.com/Malabarba/beacon][beacon]] lights up current line after bigger navigation in a file

#+begin_src emacs-lisp
(use-package beacon
  :custom
    (beacon-mode 1))
#+end_src
* BUFFER-MOVE
This allows to easily move windows (splits) around.

#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src
* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src
* TODO DIRED
#+begin_src emacs-lisp
(setq dired-listing-switches "-la --group-directories-first")

(use-package dired
  :disabled
  :config
    (evil-collection-dired-setup))

(use-package dired-open
  :after dired
  :defer t
  :config
    (setq dired-open-extensions '(("gif" . "swaiymg")
                                  ("jpg" . "swaiymg")
                                  ("png" . "swaiymg")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))
#+end_src
* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :custom
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-startup-banner "~/.config/emacs/banner.txt")
    (dashboard-center-content t)
    (dashboard-items '((recents  . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)))
                       ;; (registers . 5)
  :config
    (dashboard-setup-startup-hook)
  :bind
    (:map dashboard-mode-map
      ([remap dashboard-next-line] . 'widget-forward)
      ([remap dashboard-previous-line] . 'widget-backward)
      ("up" . 'widget-forward)
      ("down" . 'widget-backward)))
#+end_src
* DOOM-MODELINE
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a bar at the bottom of the screen

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* EMOJIS
[[https://github.com/iqbalansari/emacs-emojify][emojify]] enables support for unicode characters and emojis.

#+begin_src emacs-lisp
(use-package emojify
  :init (global-emojify-mode 1)
  :custom
    (emojify-emojis-dir "~/.local/share/emacs/emojis"))
#+end_src
* FONTS
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "CodeNewRoman Nerd Font Mono"
  :height 90
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Nerd Font"
  :height 100
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "CodeNewRoman Nerd Font Mono"
  :height 90
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
;; (set-face-attribute 'font-lock-keyword-face nil
;;   :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "CodeNewRoman Nerd Font Mono-9"))

;; Uncomment the following line if line spacing needs adjusting.
;; (setq-default line-spacing 0.12)
#+end_src
* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files. Install =python-pylint= for flycheck to work with python files. Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed. For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :after prog-mode
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
* GIT STUFF
magit is the best git thing in emacs
#+begin_src emacs-lisp
(use-package magit
  :defer t)
#+end_src

git-timemachine lets you go back in commits in file
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src
* HELPFUL
This makes emacs documentation look pretty
#+begin_src emacs-lisp
(use-package helpful
  :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
  :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
* IMENU LIST
[[https://github.com/bmag/imenu-list][imenu-list]] is basically TOC as its own buffer

#+begin_src emacs-lisp
(use-package imenu-list
  :defer t
  :custom
    (imenu-list-focus-after-activation t
     imenu-list-auto-resize t))
#+end_src
* IVY (COUNSEL)
Both are completion frameworks that make your life easier when doing M-x for example.
#+begin_src emacs-lisp
(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window)
     ("C-s" . swiper)
    :map ivy-minibuffer-map
      ("TAB" . ivy-alt-done)
      ("C-l" . ivy-alt-done)
      ("C-j" . ivy-next-line)
      ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-done)
      ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
      ("C-k" . ivy-previous-line)
      ("C-d" . ivy-reverse-i-search-kill))
  :diminish
  :custom
    (ivy-use-virtual-buffers t
     ivy-count-format "(%d/%d) "
     enable-recursive-minibuffers t)
  :config
    (ivy-mode))
    
(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
  :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

(use-package counsel
  :bind
    (("M-x" . counsel-M-x)
     ;; ([remap ibuffer] . counsel-ibuffer)
     ("C-x C-f" . counsel-find-file)
    :map minibuffer-local-map
      ("C-r" . 'counsel-minibuffer-history)))


(use-package counsel
  :after ivy
  :diminish
  :bind
    (("M-x" . counsel-M-x)
     ("C-x b" . counsel-ibuffer)
     ("C-x C-f" . counsel-find-file)
      :map minibuffer-local-map
        ("C-r" . 'counsel-minibuffer-history))
  :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x
#+end_src	
* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL. Other languages will require you to install additional modes.

#+begin_src emacs-lisp
(use-package lua-mode
  :defer t)
(use-package nix-mode
  :defer t)
(use-package markdown-mode
  :defer t)
#+end_src

** Shell
#+begin_src emacs-lisp
(use-package company-shell
  :custom
    (add-to-list 'company-backends 'company-shell)
    (add-to-list 'company-backends 'company-shell-env))
#+end_src
* NEOTREE
Neotree is a file tree viewer. When you open neotree, it jumps to the current file thanks to neo-smart-open. The neo-window-fixed-size setting makes the neotree width be adjustable. NeoTree provides following themes: classic, ascii, arrow, icons, and nerd. Theme can be configed by setting "two" themes for neo-theme: one for the GUI and one for the terminal.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :defer t
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 35
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

;; show hidden files
#+end_src
* ORG MODE
Improving and ricing org mode
** FIXING KEYBINDINGS AND EVIL MODE
#+begin_src emacs-lisp
(use-package evil-org
  :diminish
  :defer t
  :after org
  :init
    (add-hook 'org-mode-hook 'evil-org-mode t)
  :config
    ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
    ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is a module within org that can be enabled. It allows for '<s' followed by TAB to expand to a begin_src tag. Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** ORG SUPERSTAR
[[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] gives us pretty bullets instead of stars for headers.

#+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :after org
  :init (add-hook 'org-mode-hook 'org-superstar-mode t))
#+end_src

** ORG AUTO TANGLE
[[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] automatically tangles files that have =#+auto_tangle: t= in them.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :after org
  :diminish
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

** TOC
Table of contents
#+begin_src emacs-lisp
(use-package toc-org
  :defer t
  :after org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** OTHER TWEAKS
#+begin_src emacs-lisp
(use-package org
  :defer t
  :init
    (setq org-directory "~/org/"
          org-agenda-files '("agenda.org"))
  :custom-face
    ;; setting size of headers
    (org-document-title ((t (:inherit outline-1 :height 1.7))))
    (org-level-1 ((t (:inherit outline-1 :height 1.7))))
    (org-level-2 ((t (:inherit outline-2 :height 1.6))))
    (org-level-3 ((t (:inherit outline-3 :height 1.5))))
    (org-level-4 ((t (:inherit outline-4 :height 1.4))))
    (org-level-5 ((t (:inherit outline-5 :height 1.3))))
    (org-level-6 ((t (:inherit outline-5 :height 1.2))))
    (org-level-7 ((t (:inherit outline-5 :height 1.1))))
  :custom
    (org-insert-heading-respect-content nil)
    (org-hide-emphasis-markers t)
    (org-hide-leading-stars t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-ellipsis " •")
    (org-agenda-block-separator 8411))

(use-package company-org-block
  :defer t
  :after org)
#+end_src
* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+begin_src emacs-lisp
(use-package perspective
  :disabled
  :custom
    ;; NOTE! I have also set 'SCP =' to open the perspective menu.
    ;; I'm only setting the additional binding because setting it
    ;; helps suppress an annoying warning message.
    (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
    (persp-mode)
  :config
    ;; Sets a file to write to when we save states
    (setq persp-state-default-file "~/.local/share/emacs/sessions"))

    ;; This will group buffers by persp-name in ibuffer.
    (add-hook 'ibuffer-hook
              (lambda ()
                (persp-ibuffer-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic))))

    ;; Automatically save perspective states to file when Emacs exits.
    (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src
* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
NOTE that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs. I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :custom
    (projectile-known-projects-file "~/.local/share/emacs/projectile-bookmarks.eld")
  :config (projectile-mode)
  :bind-keymap
    ("C-c p" . projectile-command-map)
  :init
    (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config
    (counsel-projectile-mode 1))
#+end_src
* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src
* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff). The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src
* SHELLS AND TERMINALS
** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell
  :defer t
  :custom
    (eshell-rc-script "~/.config/eshell/profile")     ;; your profile for eshell; like a bashrc for eshell.
    (eshell-aliases-file "~/.config/eshell/aliases") ;; sets an aliases file for the eshell.
    (eshell-history-file-name "~/.local/share/emacs/eshell-history")
    (eshell-last-dir-ring-file-name "~/.local/share/emacs/eshell-lastdir")
    (eshell-history-size 5000)
    (eshell-buffer-maximum-lines 5000)
    (eshell-hist-ignoredups t)
    (eshell-scroll-to-bottom-on-input t)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh")))

(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
    (eshell-syntax-highlighting-global-mode +1))
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs. The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm. By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
  :defer t
  :config
    (setq shell-file-name "/bin/sh"
          vterm-max-scrollback 5000))
    (add-hook 'vterm-mode-hook (lambda () (setq evil-default-state 'emacs)))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles the vterm buffer at the bottom of the screen

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil
        vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :defer t)
#+end_src
* THEME (EWAL)
I started to use pywal for my ricing so I use this as my theme.
#+begin_src emacs-lisp
(use-package ewal)
(use-package ewal-doom-themes)
(use-package doom-themes
  :ensure t
  :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    
    (setq real-theme 'ewal-doom-one) ;; NOTE this is where you should set your theme
    (load-theme real-theme t)
  
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

With Emacs version 29, true transparency has been added.  
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 80)) ; For all new frames henceforth
#+end_src
* TLDR
#+begin_src emacs-lisp
(use-package tldr
  :defer t)
#+end_src
* WHICH-KEY
It shows you available keybindings, the default ones and the ones you create.
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → "
        which-key-idle-delay 0.5))
#+end_src
