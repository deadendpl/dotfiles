#!/usr/bin/env python

import subprocess
import argparse
import random
import os
from pathlib import Path
import psutil
import shutil
import time
import json

# Set up the argument parser
parser = argparse.ArgumentParser(
  prog = "pyrice",
  description = "Wrapper of pywal and wpgtk"
)

parser.add_argument(
  "--backend",
  nargs = "?",
  default = "haishoku",
  help = "Backend to use (default: haishoku)"
)

parser.add_argument(
  "-t",
  "--time",
  action = "store_false",
  help = "Disable time based theme checking"
)

parser.add_argument(
  "-l",
  "--light",
  action = "store_true",
  help = "Use light theme"
)

parser.add_argument(
  "wallpaper_path",
  nargs = "?",
  help = "Path to the wallpaper image"
)

parser.add_argument(
  "--old",
  action = "store_true",
  help = "Use the current/old wallpaper"
)

args = parser.parse_args()

if args.time:
  current_hour = time.localtime()[3]

  if current_hour >= 8 and current_hour < 16:
    args.light = True

def get_recursive_files(directory):
  "Returns a list of all files names from a directory recursively."
  files = []
  for root, dirs, filenames in os.walk(directory):
    for filename in filenames:
      files.append(os.path.join(root, filename))
  return files

def wallpaper_path_get(path = args.wallpaper_path):
  if Path(str(path)).is_dir() is True:
    return random.choice(get_recursive_files(path))
  elif path is not None:
    return os.path.realpath(path)
  else:
    return random.choice(get_recursive_files(os.environ["HOME"] + "/Pictures/bg"))

if args.old:
  path = open(os.environ["XDG_CACHE_HOME"] + "/wal/wal").read()
else:
  path = wallpaper_path_get()

def pywal_run():
  wpg_args = ["wpg", "--noreload", "--backend", args.backend, "-ns", path]
  wal_args = ["wal", "--cols16", "--backend", args.backend, "-nei", path]
  if args.light:
    wpg_args += ["-L"]
    wal_args += ["-l"]
    subprocess.Popen(["gsettings", "set", "org.gnome.desktop.interface", "icon-theme",
                      "Papirus-Light"])
    subprocess.Popen(["gsettings", "set", "org.gnome.desktop.interface", "color-scheme",
                      "prefer-light"])
  else:
    wal_args += ["-b", "#000000"]
    subprocess.Popen(["gsettings", "set", "org.gnome.desktop.interface", "icon-theme",
                      "Papirus-Dark"])
    subprocess.Popen(["gsettings", "set", "org.gnome.desktop.interface", "color-scheme",
                      "prefer-dark"])
  subprocess.run(wpg_args)
  subprocess.run(wal_args)

def gradience_wrap():
  path_exists = os.path.exists(os.environ["XDG_CONFIG_HOME"] + "/presets/user")
  if path_exists == False:
    os.mkdir(os.environ["XDG_CONFIG_HOME"] + "/presets/user")
  shutil.copyfile(os.environ["XDG_CACHE_HOME"] + "/wal/pywal.json",
                  os.environ["XDG_CONFIG_HOME"] + "/presets/user/pywal.json")
  subprocess.Popen(["gradience-cli", "apply", "-n", "pywal", "--gtk", "gtk4"])

def gtk2_icon_setup():
  if os.environ["GTK2_RC_FILES"]:
    path = os.environ["GTK2_RC_FILES"]
  else:
    path = os.environ["XDG_CONFIG_HOME"] + "/gtk-2.0/gtkrc"
  if os.path.exists(path):
    if args.light:
      subprocess.Popen(["sed", "-i", "s/Papirus-Dark/Papirus-Light/g", path])
    else:
      subprocess.Popen(["sed", "-i", "s/Papirus-Light/Papirus-Dark/g", path])

def afterwards():
  # swaybg setup and waybar
  waybarp = False
  emacsp = False
  swaybgp = False
  qutebrowserp = False
  for proc in psutil.process_iter(attrs=["pid", "name"]):
    if proc.info["name"] == "swaybg":
      if args.old != True:
        pid = proc.info["pid"]
        psutil.Process(pid).terminate()  # Terminate the process
      else:
        swaybgp = True
    elif proc.info["name"] == "waybar":
      waybarp = True
    elif proc.info["name"] == "emacs":
      emacsp = True
    elif proc.info["name"] == "sway":
      swayp = True
    elif proc.info["name"] == "qutebrowser":
      qutebrowserp = True

  # sway
  if swayp:
    colors = json.loads(open(os.environ["XDG_CACHE_HOME"] + "/wal/colors.json").read())
    background = colors["special"]["background"]
    foreground = colors["special"]["foreground"]
    subprocess.Popen(["swaymsg", "client.focused", background,
                      colors["colors"]["color11"], foreground])
    subprocess.Popen(["swaymsg", "client.focused_inactive",
                      background, background, foreground])
    subprocess.Popen(["swaymsg", "client.unfocused", background,
                      background, foreground])
    subprocess.Popen(["swaymsg", "client.urgent", background,
                      background, foreground])
    subprocess.Popen(["swaymsg", "client.placeholder", background,
                      background, foreground])
    # subprocess.run(["swaymsg", "output", "*", "bg", background, "solid_color"])

  if args.old == False or swaybgp == False:
    subprocess.Popen(["swaybg", "-m", "fit", "-i", path]) # Popen is async

  if waybarp == False:
    subprocess.Popen(["waybar"])
  else:
    # reloading waybar css
    # touch isn't enough for waybar to reload css, so
    # I add new line to the css file and delete it
    waybar_file = os.environ["XDG_CONFIG_HOME"] + "/waybar/style.css"
    subprocess.run(["sed", "-i", "1i\\\\", waybar_file])
    subprocess.run(["sed", "-i", "1d", waybar_file])

  # swaync
  subprocess.Popen(["swaync-client", "-rs"])

  # emacs
  if emacsp:
    if args.light == True:
      subprocess.run(["emacsclient", "-e",
                      "(setq ewal-doom-one-brighter-comments t " +
                      "ewal-doom-one-comment-bg nil)"])
    else:
      subprocess.run(["emacsclient", "-e",
                        "(setq ewal-doom-one-brighter-comments nil)"])
    subprocess.Popen(["emacsclient", "-e", "(load-theme 'ewal-doom-one t)"])

  if qutebrowserp:
    subprocess.Popen(["qutebrowser", ":config-source"])

  subprocess.Popen(["notify-send", "New rice applied"])

  gradience_wrap()
  gtk2_icon_setup()

pywal_run()
afterwards()
