#+title: NixOS Configuration
#+auto_tangle: t
#+startup: fold

* Table of Contents :toc:
- [[#main-configuration][Main configuration]]
  - [[#importing-unstable-channel][Importing unstable channel]]
  - [[#boot][Boot]]
  - [[#networking][Networking]]
  - [[#locales][Locales]]
  - [[#graphical-environment][Graphical environment]]
  - [[#sound][Sound]]
  - [[#users][Users]]
  - [[#packages][Packages]]
  - [[#fonts][Fonts]]
  - [[#xdg-desktop-portal][XDG Desktop Portal]]
  - [[#polkit][Polkit]]
  - [[#os-version][OS Version]]
- [[#sddm-themes][SDDM themes]]
  - [[#sugar-dark][Sugar Dark]]
  - [[#windows-7][Windows 7]]
- [[#cp-p][cp-p]]

* Main configuration
** Importing unstable channel
I import unstable package channel to use with some bledding-edge software (like hyprland).
I can then install unstable packages with =unstable.package=.

#+begin_src nix :tangle configuration.nix
{ config, pkgs, ... }:

let
  unstableTarball =
    fetchTarball
      https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz;
in
{
  nixpkgs.config = {
    packageOverrides = pkgs: {
      unstable = import unstableTarball {
        config = config.nixpkgs.config;
      };
    };
  };

#+end_src

=hardware-configuration.nix= is handling the drives and some GPU and CPU related things.
You should use =hardware-configuration.nix= of your own.

#+begin_src nix :tangle configuration.nix
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];


#+end_src
** Boot
Then we have bootloader configuration. I use GRUB since systemd-boot didn't work.
#+begin_src nix :tangle configuration.nix
boot = {
  tmp.cleanOnBoot = true;
  loader.efi.canTouchEfiVariables = true;

  loader.grub = {
    enable = true;
      device = "nodev";
      efiSupport = true;
      theme = pkgs.fetchFromGitHub { # current as of 11/2023
        owner = "deadendpl";
        repo = "nix-grub_gtg";
        rev = "f0a6eec0993b731562fd44acfe7851aed82179ec";
        sha256 = "1fg3vdqxj7qqpbhl96xhl3175a68bg0c7xbn7q2hspc2272hmh6b";
      };
      # theme = pkgs.fetchFromGitHub { # current as of 11/2023
      #   owner = "shvchk";
      #   repo = "fallout-grub-theme";
      #   rev = "e8433860b11abb08720d7c32f5b9a2a534011bca";
      #   sha256 = "1cf0gd7gziw1j6kilhihpdlna6j1hhvpsgaxsmsqckjmc7igixls";
      # };
  };


#+end_src

I set ntfs as supported filesystem because without this you can't mount ntfs drives.
#+begin_src nix :tangle configuration.nix
  supportedFilesystems = [ "ntfs" ];

#+end_src

The default kernel is latest lts kernel. I change that to zen kernel.
#+begin_src nix :tangle configuration.nix
  kernelPackages = pkgs.unstable.linuxKernel.packages.linux_zen;
};

#+end_src

I turn on =nix-command= and =flakes= and automatci garbage collector.
Idk where to put it
#+begin_src nix :tangle configuration.nix
nix = {
   settings.experimental-features = [ "nix-command" "flakes" ];
   settings.auto-optimise-store = true;
   gc = {
     automatic = true;
     dates = "2d";
     options = "-d";
   };
 };
#+end_src
** Networking
I set my hostname, enable networkmanager and disable firewall.
Just in case I also enable bluetooth.
#+begin_src nix :tangle configuration.nix
networking = {
  hostName = "lenovo-nixos";
  networkmanager.enable = true;
  firewall.enable = false;
};

hardware.bluetooth.enable = true;

#+end_src
** Locales
Locales are weird to set up. I set my timezone and keyboard layout for xorg (even though I have hyprland set up on this)
#+begin_src nix :tangle configuration.nix
time.timeZone = "Europe/Warsaw";

# Select internationalisation properties.
# i18n.defaultLocale = "en_US.UTF-8";
console = {
#   font = "Lat2-Terminus16";
  keyMap = "pl";
#   useXkbConfig = true; # use xkbOptions in tty.
};

# Configure keymap in X11
services.xserver.layout = "pl";
# services.xserver.xkbOptions = "eurosign:e,caps:escape";

i18n.extraLocaleSettings = {
  LC_ADDRESS = "pl_PL.UTF-8";
  LC_IDENTIFICATION = "pl_PL.UTF-8";
  LC_MEASUREMENT = "pl_PL.UTF-8";
  LC_MONETARY = "pl_PL.UTF-8";
  LC_NAME = "pl_PL.UTF-8";
  LC_NUMERIC = "pl_PL.UTF-8";
  LC_PAPER = "pl_PL.UTF-8";
  LC_TELEPHONE = "pl_PL.UTF-8";
  LC_TIME = "en_US.UTF-8";
};

#+end_src
The time is set to US because my org notes are already written with that in mind.

** Graphical environment
I enable xorg since that installs display (login) manager. The default login manager is lightdm but I change is to sddm and use a nice theme. I enable touchpad since I'm on netbook.

#+begin_src nix :tangle configuration.nix
# Enable the X11 windowing system.
services.xserver = {
  enable = true;
  # Enable touchpad support (enabled default in most desktopManager).
  libinput.enable = true;
  # sddm configuration
  displayManager.sddm = {
    enable = true;
    theme = "${import ./sddm-win7.nix { inherit pkgs; }}";
  };
};

# choosing simple greeter for lightdm
# services.xserver.displayManager.lightdm.greeters.tiny.enable = true;


# for 32-bit stuff (like wine)
# hardware.opengl.driSupport32Bit = true;

  #+end_src

I enable hyprland which installs necessary packages and sets up desktop entry in display manager.
I also enable =light= which lets me change screen brightness.
#+begin_src nix :tangle configuration.nix
programs = {
  hyprland.enable = true;
  light.enable = true;
  #+end_src

I also set up =gnupg= and enable =gnome-keyring=
#+begin_src nix :tangle configuration.nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  mtr.enable = true;
  gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

#+end_src

I set =fish= as my default shell
#+begin_src nix :tangle configuration.nix
  fish.enable = true;
};

users.defaultUserShell = pkgs.fish;
services.gnome.gnome-keyring.enable = true;
services.udisks2.enable = true;

#+end_src

** Sound
I set up pipewire as my sound thing.
=pulse.enable= lets me use it with pulseaudio intended software like =pavucontrol=.
#+begin_src nix :tangle configuration.nix
# rtkit is optional but recommended
security.rtkit.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
  # If you want to use JACK applications, uncomment this
  #jack.enable = true;
};

#+end_src

** Users
There is a user called =oliwier= which belongs to groups:
- =wheel= to use sudo commands
- =video= to use =light=
- =networkmanager= to use networkmanager without sudo permissions.
#+begin_src nix :tangle configuration.nix
# Define a user account. Don't forget to set a password with ‘passwd’.
users.users.oliwier = {
  isNormalUser = true;
  createHome = true;
  extraGroups = [ "wheel" "video" "networkmanager" ];
  packages = with pkgs; [
  ];
};

#+end_src

I also set up xdg default user directories
#+begin_src nix :tangle configuration.nix
environment.etc."xdg/user-dirs.defaults".text = ''
  DESKTOP=Desktop
  DOWNLOAD=Downloads
  TEMPLATES=Templates
  PUBLICSHARE=Public
  DOCUMENTS=Documents
  MUSIC=Music
  PICTURES=Pictures
  VIDEOS=Videos
'';

#+end_src
** Packages
I disable flatpak since I don't want it. Then I install a lot of packages.
#+begin_src nix :tangle configuration.nix
services.flatpak.enable = false;

# List packages installed in system profile. To search, run:
# $ nix search wget
environment.systemPackages = with pkgs; [
  # (import ./cp-p.nix)
  # cli utils
  (import ./cp-p.nix { inherit (pkgs) lib stdenv fetchFromGitHub; })
  wget
  lolcat
  htop
  btop
  unstable.fastfetch
  uwufetch
  fish
  bash
  fzf
  git
  unstable.eza
  starship
  bat
  bat-extras.batman
  bat-extras.prettybat
  bat-extras.batgrep
  unstable.lf
  fortune
  cowsay
  pokemonsay
  ctpv
  chafa
  killall
  unrar
  ripgrep
  fd
  clipboard-jh
  nix-prefetch-git
  stow
  unzip

  # for sddm
  libsForQt5.qt5.qtquickcontrols2
  libsForQt5.qt5.qtgraphicaleffects

  # desktop
  unstable.hyprland
  unstable.hyprpicker
  foot
  # mako
  unstable.neovim
  unstable.waybar
  rofi-wayland
  rofi-bluetooth
  wl-clipboard
  sway-contrib.grimshot
  xdg-utils
  xdg-user-dirs
  gnome.gnome-tweaks
  lxappearance-gtk2
  mpv
  mpvScripts.mpris
  wpgtk
  pywal
  swaybg
  swayimg
  swaynotificationcenter
  # swaylock
  # swaylock-fancy
  gnome.file-roller
  papirus-icon-theme
  dracula-theme
  zathura
  libreoffice-still

  # some dev stuff
  gnumake
  cmake
  gcc
  libtool
  tree-sitter

  # service things
  polkit_gnome
  blueberry
  networkmanager_dmenu
  gammastep
  pcmanfm
  light
  freefilesync
  syncthing
  libnotify
  keepassxc
  pulseaudio
  pavucontrol
  udiskie
  # bitwarden
  # bitwarden-cli

  # qutebrowser
  unstable.qutebrowser
  # python311Packages.inotify-simple
  # python311Packages.psutil
  # python311Packages.python-daemon

  # android
  android-tools
  # unstable.scrcpy

  # latex in emacs
  # texliveMedium
  # perl5.38.2-LaTeXML
  emacs29
  # this is for installing elisp packages from nix repos instead of normal elisp repos
  # (pkgs.emacsWithPackagesFromUsePackage {
  #     package = pkgs.emacsGit;  # replace with pkgs.emacsPgtk, or another version if desired.
  #     config = path/to/your/config.el;
  #     # config = path/to/your/config.org; # Org-Babel configs also supported

  #     # Optionally provide extra packages not in the configuration file.
  #     extraEmacsPackages = epkgs: [
  #       epkgs.use-package;
  #     ];

  #     # Optionally override derivations.
  #     override = epkgs: epkgs // {
  #       somePackage = epkgs.melpaPackages.somePackage.overrideAttrs(old: {
  #          # Apply fixes here
  #       });
  #     };
  #   })

  # games
  # i love how you can specify retroarch cores here
  (unstable.retroarch.override {
    cores = with libretro; [
      parallel-n64
      snes9x
      swanstation
      melonds
      fbneo
    ];
  })
];

nixpkgs.config.allowUnfree = true;

#+end_src

I set Emacs as as =$EDITOR=
#+begin_src nix :tangle configuration.nix
services.emacs.defaultEditor = true;

#+end_src
** Fonts
I install nerd fonts. Istead of installing all fonts you can specify which ones you want.
#+begin_src nix :tangle configuration.nix
# in unstable: fonts.packages = with pkgs; [
fonts.fonts = with pkgs; [
  (nerdfonts.override { fonts = [ "CodeNewRoman" "JetBrainsMono" "Ubuntu" ]; })
  noto-fonts-color-emoji
];

#+end_src
** XDG Desktop Portal
I set it up to work with hyprland
#+begin_src nix :tangle configuration.nix
# setting up xdg desktop portal
services.dbus.enable = true;
xdg.portal = {
  enable = true;
  wlr.enable = true;
  # gtk portal needed to make gtk apps happy
  extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
};

#+end_src
** Polkit
I set up =gnome-polkit=.
#+begin_src nix :tangle configuration.nix
# gnome polkit
systemd = {
 user.services.polkit-gnome-authentication-agent-1 = {
   description = "polkit-gnome-authentication-agent-1";
   wantedBy = [ "graphical-session.target" ];
   wants = [ "graphical-session.target" ];
   after = [ "graphical-session.target" ];
   serviceConfig = {
       Type = "simple";
       ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
       Restart = "on-failure";
       RestartSec = 1;
       TimeoutStopSec = 10;
     };
 };
  extraConfig = ''
    DefaultTimeoutStopSec=10s
  '';
};

#+end_src
** OS Version
Initially I set it up on 23.05 but active stable version now is 23.11
#+begin_src nix :tangle configuration.nix
system = {
  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  copySystemConfiguration = false;
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It's perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  stateVersion = "23.11"; # Did you read the comment?
};

}
#+end_src
* SDDM themes
** Sugar Dark
#+begin_src nix :tangle sddm-sugar-dark.nix
{ pkgs }:

pkgs.stdenv.mkDerivation {
  name = "sddm-theme";
  src = pkgs.fetchFromGitHub {
    owner = "MarianArlt";
    repo = "sddm-sugar-dark";
    rev = "ceb2c455663429be03ba62d9f898c571650ef7fe";
    sha256 = "0153z1kylbhc9d12nxy9vpn0spxgrhgy36wy37pk6ysq7akaqlvy";
  };
  installPhase = ''
    mkdir -p $out
    cp -R ./* $out/
  '';
}
#+end_src
** Windows 7
#+begin_src nix :tangle sddm-win7.nix
{ pkgs }:

pkgs.stdenv.mkDerivation {
  name = "sddm-theme";
  src = pkgs.fetchFromGitHub {
    owner = "AudacityXD62";
    repo = "win7welcomesddm";
    rev = "4887e163786657892eee452fddce36e5f02f4780";
    sha256 = "18x4mik24bahqn1ivqzc0120xl12ynd17vh1f8vvq5zlvqn3v78d";
  };
  installPhase = ''
    mkdir -p $out
    cp -R ./* $out/
  '';
}
#+end_src
* cp-p
#+begin_src nix :tangle cp-p.nix
{ lib
, stdenv
, fetchFromGitHub }:

stdenv.mkDerivation {
  pname = "cp-p";
  version = "unstable-2022-08-07";

  src = fetchFromGitHub {
    owner = "Naheel-Azawy";
    repo = "cp-p";
    rev = "2e97ba534a5892c47a0317a038b19bcda221e5e6";
    hash = "sha256-OB6evgfRaEVKL07sOUPsBsWB+9w6gmyjJK6nNsZdKM4=";
  };

  makeFlags = [ "PREFIX=$(out)" "BINPREFIX=$(PREFIX)/bin" ];

  meta = {
    homepage = "https://github.com/Naheel-Azawy/cp-p";
    description = "cp (and mv), with progress";
    license = with lib.licenses; [ gpl3Only ];
    maintainers = with lib.maintainers; [ deadendpl ];
    platforms = lib.platforms.all;
  };
}
#+end_src
