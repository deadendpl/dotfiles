#+TITLE: Termux Configuration
#+description: A whole bunch of configuration and things for Termux.
#+auto_tangle: t

* Deployment
#+begin_src sh :tangle deploy.sh :shebang #!/usr/bin/env bash
termux-change-repo
termux-setup-storage
pkg install emacs sqlite fish eza git openssh openssh-sftp-server iproute2
chsh -s fish
#+end_src
* Termux configuration
#+begin_src conf :tangle .termux/termux.properties
### After making required changes, save the file and run `termux-reload-settings`
### in the terminal for changes to take effect. Some properties require app
### process to be restarted to be updated which can be done by force stopping
### the app from Android app settings.
### All information here can also be found on the
### wiki: https://wiki.termux.com/wiki/Terminal_Settings

###############
# General
###############

### Allow external applications to execute arbitrary commands within Termux.
### This potentially could be a security issue, so option is disabled by
### default. Uncomment to enable.
# allow-external-apps = true

### Default working directory that will be used when launching the app.
# default-working-directory = /data/data/com.termux/files/home

### Uncomment to disable toasts shown on terminal session change.
# disable-terminal-session-change-toast = true

### Uncomment to not show soft keyboard on application start.
# hide-soft-keyboard-on-startup = true

### Uncomment to let keyboard toggle button to enable or disable software
### keyboard instead of showing/hiding it.
# soft-keyboard-toggle-behaviour = enable/disable

### Adjust terminal scrollback buffer. Max is 50000. May have negative
### impact on performance.
# terminal-transcript-rows = 2000

### Uncomment to use volume keys for adjusting volume and not for the
### extra keys functionality.
# volume-keys = volume

###############
# Fullscreen mode
###############

### Uncomment to let Termux start in full screen mode.
# fullscreen = true

### Uncomment to attempt workaround layout issues when running in
### full screen mode.
# use-fullscreen-workaround = true

###############
# Cursor
###############

### Cursor blink rate. Values 0, 100 - 2000.
# terminal-cursor-blink-rate = 0

### Cursor style: block, bar, underline.
# terminal-cursor-style = block

###############
# Extra keys
###############

### Settings for choosing which set of symbols to use for illustrating keys.
### Choose between default, arrows-only, arrows-all, all and none
# extra-keys-style = default

### Force capitalize all text in extra keys row button labels.
# extra-keys-text-all-caps = true

### Default extra-key configuration
# extra-keys = [[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]

### Two rows with more keys
# extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'], \
#               ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]

### Configuration with additional popup keys (swipe up from an extra key)
# extra-keys = [[ \
#   {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
#   {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
#   {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
#   {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
#   {key: LEFT, popup: HOME}, \
#   {key: DOWN, popup: PGDN}, \
#   {key: UP, popup: PGUP}, \
#   {key: RIGHT, popup: END}, \
#   {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
#   {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
# ]]

### Another configuration with advanced popup key usage designed for more
### specific use-cases. In this case, it is designed for working with Vim-like
### editors for faster navigation
extra-keys = [ \
 [ \
   { key: ESC, popup: { macro: ":q\n", display: "QuickExit" } }, \
   { key: '/', popup: '\\\\' }, \
   { key: '-', popup: '_' }, \
   { key: HOME, popup: { macro: "CTRL HOME", display: "Top" } }, \
   { key: UP, popup: { macro: "CTRL UP", display: "UP" } }, \
   { key: END, popup: { macro: "CTRL END", display: "End" } }, \
   { key: ":", popup: ";" }, \
   { key: "(", popup: "{" } \
 ], \
 [ \
   { key: TAB, popup: { macro: ":wq\n", display: "Write And Exit" } }, \
   { key: CTRL, popup: { macro: ":w\n", display: "Write" } }, \
   ALT, \
   { key: LEFT, popup: { macro: "CTRL LEFT", display: "Left" } }, \
   { key: DOWN, popup: { macro: "CTRL DOWN", display: "Bottom" } }, \
   { key: RIGHT, popup: { macro: "CTRL RIGHT", display: "Right" } }, \
   { key: "#", popup: "$" }, \
   { key: ")", popup: "}" } \
 ] \
]

###############
# Colors/themes
###############

### Force black colors for drawer and dialogs
# use-black-ui = true

###############
# HW keyboard shortcuts
###############

### Disable hardware keyboard shortcuts.
# disable-hardware-keyboard-shortcuts = true

### Open a new terminal with ctrl + t (volume down + t)
# shortcut.create-session = ctrl + t

### Go one session down with (for example) ctrl + 2
# shortcut.next-session = ctrl + 2

### Go one session up with (for example) ctrl + 1
# shortcut.previous-session = ctrl + 1

### Rename a session with (for example) ctrl + n
# shortcut.rename-session = ctrl + n

###############
# Bell key
###############

### Vibrate device (default).
# bell-character = vibrate

### Beep with a sound.
# bell-character = beep

### Ignore bell character.
# bell-character = ignore

###############
# Back key
###############

### Send the Escape key.
# back-key=escape

### Hide keyboard or leave app (default).
# back-key=back

###############
# Keyboard issue workarounds
###############

### Letters might not appear until enter is pressed on Samsung devices
# enforce-char-based-input = true

### ctrl+space (for marking text in emacs) does not work on some devices
# ctrl-space-workaround = true
#+end_src
* Shell
#+begin_src sh :tangle .config/fish/config.fish
export TERM=xterm-256color
set -gx EDITOR 'emacsclient -c -t -a "nvim"'

# apt
alias pinst='pkg install'
alias ppu='pkg purge'
alias pautopu='pkg autopurge'
alias pup='pkg upgrade'
alias pupd='pkg update'
alias pupg='pkg upgrade'
alias pinstalled='pkg list --installed'
alias psearch='pkg search'

alias clr='clear'
alias l='eza --all --long --header --icons --git --group-directories-first --color-scale all'
alias vim="emacsclient -c -t -a ''"
#+end_src
* Emacs
#+PROPERTY: header-args :tangle .config/emacs/init.el
The real reason why I made this.
[[https://orgro.org/][Orgro]] is good viewer but that's it.
[[https://github.com/orgzly-revived/orgzly-android-revived][Orgzly]] is agenda focused app but that's it.
Only Emacs allows comfy editing of my notes.

This is kind of a copy of my PC Emacs config with some stuff cut out.
** Open URLs in android web browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src
** Some modes turned on or off
#+begin_src emacs-lisp
(tooltip-mode -1)                    ; Disable tooltips
(menu-bar-mode -1)                   ; Disable the menu bar
(global-auto-revert-mode t)          ; Automatically show changes if the file has changed
(global-visual-line-mode t)          ; Enable truncated lines (line wrapping)
;; (global-display-line-numbers-mode t) ; Line numbers
(delete-selection-mode 1)            ; You can select text and delete it by typing (in emacs keybindings).
(electric-pair-mode 0)               ; Turns off automatic parens pairing
(electric-indent-mode -1)            ; Turn off the weird indenting that Emacs does by default.
(column-number-mode 1)               ; Column number in modeline
(fset 'yes-or-no-p 'y-or-n-p)        ; Simplyfying yes or no prompts
(save-place-mode 1)                  ; Saving last place in file
(set-default-coding-systems 'utf-8)  ; Setting default conding to utf-8
;; (display-battery-mode 1)             ; Setting battery percentage in modeline
(indent-tabs-mode 0)                 ; Using spaces instead of tabs for indentation
#+end_src
** Variables
#+begin_src emacs-lisp
(defvar user-share-emacs-directory "~/.local/share/emacs/"
  "Elisp packages cache folders/files normally clutter user-emacs-directory.
The same goes for some default files like bookmarks file.
In order to prevent that this variable exists.
Most of the stuff will get redirected here.")

(setq-default visible-bell nil ;; Set up the visible bell
              inhibit-startup-message nil ; default emacs startup message
              inhibit-startup-screen nil
              recentf-max-saved-items nil ; infinite amount of entries in recentf file
              recentf-auto-cleanup 'never ; not cleaning recentf file
              global-auto-revert-non-file-buffers t ; refreshing buffers when files have changed
              use-dialog-box nil ; turns off graphical dialog boxes
              initial-major-mode 'fundamental-mode ; setting scratch buffer in fundamental mode
              initial-scratch-message "WELCOME TO TERMUX"
              initial-buffer-choice t
              scroll-conservatively 1000 ; Scroll one line at a time
              scroll-margin 1 ; Keep a margin of 1 line when scrolling at the window's edge
              tab-always-indent nil
              vc-follow-symlinks t ; Enable follow symlinks
              indent-tabs-mode nil ; use spaces instead of tabs for indenting
              standard-indent 2 ; indenting set to 2
              auto-revert-interval 1
              ;; auto-save-list-file-name (concat user-share-emacs-directory "auto-save-list/list")
              recentf-save-file (concat user-share-emacs-directory "recentf") ; recentf file put somewhere else
              bookmark-default-file (concat user-share-emacs-directory "bookmarks") ; bookmarks file put somewhere else
              elfeed-db-directory (concat user-share-emacs-directory "elfeed") ; elfeed cache? directory
              auto-save-list-file-prefix (concat user-share-emacs-directory "auto-save-list/.saves-")
              prescient-save-file (concat user-share-emacs-directory "var/prescient-save.el")
              custom-file (concat user-share-emacs-directory "custom.el") ; custom settings that emacs autosets put into it's own file
              backup-directory-alist '((".*" . "~/.local/share/Trash/files")) ; moving backup files to trash directory
              tramp-persistency-file-name (concat user-share-emacs-directory "tramp") ; tramp file put somewhere else
              save-place-file (concat user-share-emacs-directory "places")
              url-configuration-directory (concat user-share-emacs-directory "url") ; cache from urls (eww)
              multisession-directory (concat user-share-emacs-directory "multisession")
              transient-history-file (concat user-share-emacs-directory "transient/history.el"))
#+end_src
** Line numbers off in some modes
#+begin_src emacs-lisp
(dolist (mode '(neotree-mode-hook
                vterm-mode-hook
                term-mode-hook
                shell-mode-hook
                Info-mode-hook
                helpful-mode-hook
                help-mode-hook
                dashboard-mode-hook
                dashboard-after-initialize-hook
                dired-mode-hook
                org-agenda-mode-hook
                which-key-mode-hook
                tldr-mode-hook
                dictionary-mode-hook
                Man-mode-hook
                woman-mode-hook
                ibuffer-mode-hook
                elisp-refs-mode-hook
                imenu-list-minor-mode-hook
                imenu-list-major-mode-hook
                imenu-list-after-jump-hook
                imenu-list-update-hook
                backtrace-revert-hook
                backtrace-mode-hook
                calendar-mode-hook
                special-mode-hook
                outline-mode-hook
                eat-mode-hook
                compilation-mode-hook
                Custom-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Package management
*** Normal packages
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-user-dir (concat user-share-emacs-directory "packages/")
      package-gnupghome-dir (concat user-share-emacs-directory "gpg")
      package-async t
      package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("nongnu-elpa" . "https://elpa.nongnu.org/nongnu/")
                         ("org" . "https://orgmode.org/elpa/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
#+end_src

Use-package will lazy-load packages by default.
I have =use-package-always-ensure= because otherwise packages didn't want to download with =use-package-always-defer=.
#+begin_src emacs-lisp
(setq use-package-verbose t
      use-package-always-ensure t ; packages by default will be lazy loaded, like they will have defer: t
      use-package-always-defer t) ; packages by default will be lazy loaded, like they will have defer: t
#+end_src

The automatic garbage collector is installed here as the first package because that speeds up startup.
#+begin_src emacs-lisp
(use-package gcmh
  :demand
  :config (gcmh-mode 1))
#+end_src
*** Quelpa
#+begin_src emacs-lisp
(use-package quelpa
  :demand
  :custom
    (quelpa-dir (concat user-share-emacs-directory "quelpa/"))
    (quelpa-checkout-melpa-p nil))
    ;; (quelpa-build-dir (concat quelpa-dir "build/"))
    ;; (quelpa-melpa-dir (concat quelpa-dir "melpa/"))
    ;; (quelpa-packages-dir (concat quelpa-dir "packages/")))
(use-package quelpa-use-package
  :demand
  :after quelpa)
#+end_src
** Evil and keybindings
Before having my own Emacs config I used [[https://github.com/doomemacs/doomemacs][Doom Emacs]] and before that I used vanilla Vim so I set up [[https://github.com/emacs-evil/evil][evil mode]].
*** Evil setup
#+begin_src emacs-lisp
;;(defun custom/evil-hook ()
;;  (dolist (mode '(custom-mode
;;                  eshell-mode
;;                  git-rebase-mode
;;                  erc-mode
;;                  circe-server-mode
;;                  circe-chat-mode
;;                  circe-query-mode
;;                  sauron-mode
;;                  term-mode))
;;   (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :demand
  :init
    (setq evil-want-integration t  ;; this is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; adds vim-like c-r redo functionality
  :bind
    (:map evil-normal-state-map
      ([remap evil-search-forward] . 'swiper))
  :config
    (evil-mode)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd "C-s") 'save-buffer) ;; for quick save
    (evil-define-key 'normal ibuffer-mode-map (kbd "l") 'ibuffer-visit-buffer))
    ;; (define-key evil-motion-state-map (kbd "/") 'swiper))
#+end_src

[[https://github.com/emacs-evil/evil-collection][evil collection]] has preconfigured evil keybindings for some essential emacs packages.
#+begin_src emacs-lisp
(use-package evil-collection
  :demand
  :after evil
  :config
    ;; do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  the following line is here
    ;; for documentation purposes in case you need it.
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))
#+end_src

[[https://github.com/redguardtoo/evil-nerd-commenter][evil nerd commenter]] is convenient commenting thing
#+begin_src emacs-lisp
(use-package evil-nerd-commenter :after evil)
#+end_src
*** Actual keybindings
[[https://github.com/noctuid/general.el][General]] lets you bind keybindings.
This is a big list.
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer custom/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (custom/leader-keys
    "SPC" '(projectile-find-file :wk "Find file in project")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "u" '(universal-argument :wk "Universal argument")
    "x" '(execute-extended-command :wk "M-x")
    "q" '(kill-emacs :wk "Exit Emacs")) ;; easy quitting

  (custom/leader-keys
    "TAB" '(:ignore t :wk "Spacing/Indent")
    "TAB TAB" '(evilnc-comment-or-uncomment-lines :wk "Un/Comment lines")
    "TAB SPC" '(untabify :wk "Untabify")
    "TAB DEL" '(whitespace-cleanup :wk "Clean whitespace"))

  (custom/leader-keys
    "RET" '(bookmark-jump :wk "Go to bookmark"))

  (custom/leader-keys
    "a" '(:ignore t :wk "Amusement")
    "a b" '(animate-birthday-present :wk "Birthday")
    "a d" '(dissociated-press :wk "Dissoctation")
    "a g" '(:ignore t :wk "Games")
    "a g b" '(bubbles :wk "Bubbles")
    "a g m" '(minesweeper :wk "Minesweeper")
    "a g p" '(pong :wk "Pong")
    "a g s" '(snake :wk "Snake")
    "a g t" '(tetris :wk "Tetris")
    "a e" '(:ignore t :wk "Emoji")
    "a e +" '(emoji-zoom-increase :wk "Zoom in")
    "a e -" '(emoji-zoom-decrease :wk "Zoom out")
    "a e 0" '(emoji-zoom-reset :wk "Zoom reset")
    "a e d" '(emoji-describe :wk "Describe")
    "a e e" '(emoji-insert :wk "Insert")
    "a e i" '(emoji-insert :wk "Insert")
    "a e l" '(emoji-list :wk "List")
    "a e r" '(emoji-recent :wk "Recent")
    "a e s" '(emoji-search :wk "Search")
    "a z" '(zone :wk "Zone"))

  (custom/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(counsel-ibuffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b f" '(scratch-buffer :wk "Scratch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (custom/leader-keys
    "c" '(:ignore t :wk "Compiling")
    "c c" '(compile :wk "Compile")
    "c r" '(recompile :wk "Recompile"))

  (custom/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d h" '(custom/dired-go-to-home :wk "Open home directory")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired")
    "d /" '((lambda () (interactive) (dired "/")) :wk "Open /"))

  (custom/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (custom/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
              (find-file "~/.config/emacs/config.org"))
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired user-emacs-directory))
            :wk "Open user-emacs-directory in dired")
    "f E" '((lambda () (interactive)
              (dired user-share-emacs-directory))
            :wk "Open user-share-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el"))
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f p" '(counsel-find-file (user-emacs-directory) :wk "Config directory")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (custom/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

  (custom/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h h" '(helpful-at-point :wk "Describe at point")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h M" '(describe-keymap :wk "Describe keymap")
    "h p" '(describe-package :wk "Describe package")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
    "h r t" '((lambda () (interactive) (load-theme real-theme t)) :wk "Reload theme")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (custom/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table")
    "m b a" '(org-table-align :wk "Align table")
    "m b b" '(org-table-blank-field :wk "Make blank field")
    "m b c" '(org-table-create-or-convert-from-region :wk "Create/Convert from region")
    "m b e" '(org-table-edit-field :wk "Edit field")
    "m b f" '(org-table-edit-formulas :wk "Edit formulas")
    "m b h" '(org-table-field-info :wk "Field info")
    "m b s" '(org-table-sort-lines :wk "Sort lines")
    "m b r" '(org-table-recalculate :wk "Recalculate")
    "m b R" '(org-table-recalculate-buffer-tables :wk "Recalculate buffer tables")
    "m b d" '(:ignore t :wk "delete")
    "m b d c" '(org-table-delete-column :wk "Delete column")
    "m b d r" '(org-table-kill-row :wk "Delete row")
    "m b i" '(:ignore t :wk "insert")
    "m b i c" '(org-table-insert-column :wk "Insert column")
    "m b i h" '(org-table-insert-hline :wk "Insert horizontal line")
    "m b i r" '(org-table-insert-row :wk "Insert row")
    "m b i H" '(org-table-hline-and-move :wk "Insert horizontal line and move")
    "m c" '(org-capture :wk "Capture")
    "m d" '(:ignore t :wk "Date/deadline")
    "m d d" '(org-deadline :wk "Org deadline")
    "m d s" '(org-schedule :wk "Org schedule")
    "m d t" '(org-time-stamp :wk "Org time stamp")
    "m d T" '(org-time-stamp-inactive :wk "Org time stamp inactive")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m f" '(:ignore t :wk "Fonts")
    "m f b" '((lambda () (interactive) (custom/org-format-in-region "*")) :wk "Bold in region")
    "m f c" '((lambda () (interactive) (custom/org-format-in-region "~")) :wk "Code in region")
    "m f C" '((lambda () (interactive) (custom/org-format-in-region "=")) :wk "Verbatim in region")
    "m f i" '((lambda () (interactive) (custom/org-format-in-region "/")) :wk "Italic in region")
    "m f l" '((lambda () (interactive) (custom/org-format-in-region "$")) :wk "Latex in region")
    "m f u" '((lambda () (interactive) (custom/org-format-in-region "_")) :wk "Underline in region")
    "m f -" '((lambda () (interactive) (custom/org-format-in-region "+")) :wk "Strike through in region")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m I" '(:ignore t :wk "IDs")
    "m I c" '(org-id-get-create :wk "Create ID")
    "m l" '(:ignore t :wk "Link")
    "m l l" '(org-insert-link :wk "Insert link")
    "m l i" '(org-roam-node-insert :wk "Insert roam link")
    "m p" '(:ignore t :wk "Priority")
    "m p d" '(org-priority-down :wk "Down")
    "m p p" '(org-priority :wk "Set priority")
    "m p u" '(org-priority-down :wk "Up")
    "m q" '(org-set-tags-command :wk "Set tag")
    "m s" '(:ignore t :wk "Tree/Subtree")
    "m s a" '(org-toggle-archive-tag :wk "Archive tag")
    "m s b" '(org-tree-to-indirect-buffer :wk "Tree to indirect buffer")
    "m s c" '(org-clone-subtree-with-time-shift :wk "Clone subtree with time shift")
    "m s d" '(org-cut-subtree :wk "Cut subtree")
    "m s h" '(org-promote-subtree :wk "Promote subtree")
    "m s j" '(org-move-subtree-down :wk "Move subtree down")
    "m s k" '(org-move-subtree-up :wk "Move subtree up")
    "m s l" '(org-demote-subtree :wk "Demote subtree")
    "m s n" '(org-narrow-to-subtree :wk "Narrow to subtree")
    "m s r" '(org-refile :wk "Refile")
    "m s s" '(org-sparse-tree :wk "Sparse tree")
    "m s A" '(org-archive-subtree :wk "Archive subtree")
    "m s N" '(widen :wk "Widen")
    "m s S" '(org-sort :wk "Sort")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (custom/leader-keys
    "M" '(:ignore t :wk "MarkDown")
    "M f" '(:ignore t :wk "Fonts")
    "M f b" '(markdown-insert-bold :wk "Bold in region")
    "M l" '(:ignore t :wk "Link")
    "M l l" '(markdown-insert-link :wk "Insert link"))

  (custom/leader-keys
    "n" '(:ignore t :wk "Notes")
    "n d" '(:ignore t :wk "Dired")
    "n d o" '(custom/org-notes-dired :wk "Open notes in Dired")
    "n d r" '(custom/org-roam-notes-dired :wk "Open roam notes in Dired")
    "n o" '(:ignore t :wk "Obsidian")
    "n o c" '(obsidian-capture :wk "Create note")
    "n o d" '((lambda () (interactive) (dired obsidian-directory)) :wk "Open notes in Dired")
    "n o f" '(obsidian-tag-find :wk "Find by tag")
    "n o j" '(obsidian-jump :wk "Jump to note")
    "n o m" '(obsidian-move-file :wk "Move note/file")
    "n o r" '(obsidian-update :wk "Update")
    "n o /" '(obsidian-search :wk "Search")
    "n o ?" '(obsidian-hydra/body :wk "Everything")
    "n r" '(:ignore t :wk "Org Roam")
    "n r a" '(:ignore t :wk "Alias")
    "n r a a" '(org-roam-alias-add :wk "Add alias")
    "n r a r" '(org-roam-alias-remove :wk "Remove alias")
    "n r d" '(:ignore t :wk "Roam dailies")
    "n r d c" '(org-roam-dailies-capture-today :wk "Cature today")
    "n r d t" '(org-roam-dailies-goto-today :wk "Go to today")
    "n r d j" '(org-roam-dailies-goto-next-note :wk "Next note")
    "n r d k" '(org-roam-dailies-goto-previous-note :wk "Previous note")
    "n r f" '(org-roam-node-find :wk "Find note")
    "n r i" '(org-roam-node-insert :wk "Insert note")
    "n r l" '(org-roam-buffer-toggle :wk "Toggle note buffer")
    "n r r" '(:ignore t :wk "References")
    "n r r a" '(org-roam-ref-add :wk "Add reference")
    "n r r r" '(org-roam-ref-remove :wk "Remove reference"))

  (custom/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  (custom/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (custom/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (custom/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t d" '(toggle-debug-on-error :wk "Debug on error")
    "t e" '(eshell-toggle :wk "Eshell")
    "t f" '(flycheck-mode :wk "Flycheck")
    "t i" '(imenu-list-smart-toggle :wk "Imenu list")
    "t l" '(display-line-numbers-mode :wk "Line numbers")
    "t n" '(neotree-toggle :wk "Neotree")
    "t r" '(rainbow-mode :wk "Rainbow mode")
    "t t" '(visual-line-mode :wk "Word Wrap")
    "t v" '(vterm-toggle :wk "Vterm")
    "t z" '(writeroom-mode :wk "Zen mode"))

  (custom/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w q" '(:ingore t :wk "Close on side")
    "w q h" '(custom/close-left-window :wk "Left")
    "w q j" '(custom/close-down-window :wk "Down")
    "w q k" '(custom/close-up-window :wk "Up")
    "w q l" '(custom/close-right-window :wk "Right")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Go to next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
)

;; text resizing
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Icons
#+begin_src emacs-lisp
(use-package nerd-icons :defer t)
(use-package all-the-icons)
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
  :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :demand
  :init (doom-modeline-mode 1))
#+end_src
** Ivy and Counsel
#+begin_src emacs-lisp
(use-package ivy
  :demand
  :diminish
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window)
     ("C-s" . swiper)
    :map ivy-minibuffer-map
      ("TAB" . ivy-alt-done)
      ("C-l" . ivy-alt-done)
      ("C-j" . ivy-next-line)
      ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-done)
      ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
      ("C-k" . ivy-previous-line)
      ("C-d" . ivy-reverse-i-search-kill))
  :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (enable-recursive-minibuffers t)
  :config
    (ivy-mode))

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
  :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

(use-package counsel
  :after ivy
  :diminish
  :bind
    (("M-x" . counsel-M-x)
     ("C-x b" . counsel-ibuffer)
     ("C-x C-f" . counsel-find-file)
      :map minibuffer-local-map
        ("C-r" . 'counsel-minibuffer-history))
  :config
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x
#+end_src

[[https://github.com/radian-software/prescient.el][Prescient]] adds rememebring and filtering to ivy choices which is convenient.
#+begin_src emacs-lisp
(use-package ivy-prescient
  :demand
  :after ivy
  :custom
    (ivy-prescient-enable-filtering nil)
    ;; Here are commands that I don't want to get sorted
    (ivy-prescient-sort-commands '(:not counsel-recentf swiper swiper-isearch ivy-switch-buffer))
  :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src
** Org Mode
*** Fixing keybindings and evil mode
#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :init
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil)
      (evil-define-key 'normal org-mode-map
        "gj" 'evil-next-visual-line
        "gk" 'evil-previous-visual-line
        (kbd "M-h") 'org-metaleft
        (kbd "M-j") 'org-metadown
        (kbd "M-k") 'org-metaup
        (kbd "M-l") 'org-metaright
        (kbd "M-<return>") 'org-return))

    ;; In tables pressing RET doesn't follow links.
    ;; I fix that
    (defun custom/org-return-follow-link ()
      "If point is on a link, open it. Otherwise, insert a newline.\nIt's used only for following links in tables by pressing RET."
      (interactive)
      (if (org-in-regexp org-link-any-re 1)
          (org-open-at-point)
          (org-return)))

    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (kbd "RET") 'custom/org-return-follow-link)))

    ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
    ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link t))

;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
*** Source Code Block Tag Expansion
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
*** COMPANY SUPPORT :ARCHIVE:
#+begin_src emacs-lisp
(use-package company-org-block
  :defer t
  :after org
  :custom
    (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src
*** Org appear
With [[https://github.com/awth13/org-appear][this]] emphasis markers will display when hovering on rich text.
It's set up so it will display markers when entering insert mode.
#+begin_src emacs-lisp
(use-package org-appear
  :after org
  :hook (org-mode . (lambda () (org-appear-mode t)))
  :custom
    (org-appear-trigger 'manual)
    (org-appear-autolinks t)
  :config
    (add-hook 'org-mode-hook (lambda ()
      (add-hook 'evil-insert-state-entry-hook
        #'org-appear-manual-start
        nil
        t)
      (add-hook 'evil-insert-state-exit-hook
        #'org-appear-manual-stop
          nil
          t))))
#+end_src
*** Org auto tangle
[[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] automatically tangles files that have =#+auto_tangle: t= in them.
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :after org
  :diminish
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** ORG MODERN :ARCHIVE:
[[https://github.com/minad/org-modern][It]] prettifies almost everything.
If you don't use the same font as me then you need to edit ~org-modern-label~'s height.
#+begin_src emacs-lisp
(use-package org-modern
  :defer t
  :after org
  :init (add-hook 'org-mode-hook 'org-modern-mode t)
  :custom-face
    (org-modern-label ((t (:height 1.2))))
  :custom
    (org-modern-star nil)
    (org-modern-list nil)
    (org-modern-table nil))
#+end_src

But it doesn't work well with =org-indent-mode= which indents text to headers.
Thankfully there is a [[https://github.com/jdtsmith/org-modern-indent][package that fixes that]].
#+begin_src emacs-lisp
(use-package org-modern-indent
  :quelpa (org-modern-indent :fetcher github :repo "jdtsmith/org-modern-indent")
  :after org
  :init (add-hook 'org-modern-hook #'org-modern-indent-mode t))
#+end_src
*** Org Roam
[[https://www.orgroam.com/][Org roam]] is nice wiki-like note management thing. Reminds me of [[https://obsidian.md][Obsidian]].
#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :init
    (setq org-roam-v2-ack t
          org-roam-directory "~/storage/shared/org-roam")
  :custom
    (org-roam-db-location (concat user-share-emacs-directory "org/org-roam.db"))
    (org-roam-dailies-directory "journals/")
    (org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %U\n")
         :unnarrowed t)))
  :config
    (org-roam-setup)
    (evil-collection-org-roam-setup)
    (require 'org-roam-export))
#+end_src
*** ORG SUPERSTAR :ARCHIVE:
[[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] gives us pretty bullets instead of stars for headers.
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . (lambda () (org-superstar-mode t)))
  :custom
    (org-superstar-remove-leading-stars t)
  :config
    (setq org-superstar-item-bullet-alist
      '((?+ . ?✸)
        (?* . ?•)
        (?- . ?●))))
#+end_src
*** ORG YT :ARCHIVE:
#+begin_src emacs-lisp
(quelpa '(org-yt :fetcher github :repo "TobiasZawada/org-yt"))
(use-package org-yt
  :ensure nil
  :after org
  :config
    (require 'org-yt)

    (defun org-image-link (protocol link _description)
      "Interpret LINK as base64-encoded image data."
      (cl-assert (string-match "\\`img" protocol) nil
                 "Expected protocol type starting with img")
      (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
        (cl-assert buf nil
                   "Download of image \"%s\" failed." link)
        (with-current-buffer buf
          (goto-char (point-min))
          (re-search-forward "\r?\n\r?\n")
          (buffer-substring-no-properties (point) (point-max)))))

    (org-link-set-parameters
     "imghttp"
     :image-data-fun #'org-image-link)

    (org-link-set-parameters
     "imghttps"
     :image-data-fun #'org-image-link))
#+end_src
*** TOC
Table of contents after after typing =:toc:= in header
#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
*** Notes
#+begin_src emacs-lisp
(defun custom/org-notes-dired ()
  "Opens org-directory in Dired."
  (interactive)
  (dired org-directory))

(defun custom/org-roam-notes-dired ()
  "Opens org-roam-directory in Dired."
  (interactive)
  (dired org-roam-directory))

(defun custom/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file."
  (interactive)
  (org-map-entries 'org-id-get-create))
#+end_src
*** Other tweaks
A whole lot of other stuff
#+begin_src emacs-lisp
(use-package org
  :hook
  (org-mode . (lambda () (add-hook 'text-scale-mode-hook #'custom/org-resize-latex-overlays nil t)))
  (org-mode . (lambda () (org-indent-mode t)))
  ;; :bind
  ;;   ([remap org-insert-heading-respect-content] . org-meta-return)
  :custom-face
  ;; setting size of headers
  (org-document-title ((t (:inherit outline-1 :height 1.7))))
  (org-level-1 ((t (:inherit outline-1 :height 1.7))))
  (org-level-2 ((t (:inherit outline-2 :height 1.6))))
  (org-level-3 ((t (:inherit outline-3 :height 1.5))))
  (org-level-4 ((t (:inherit outline-4 :height 1.4))))
  (org-level-5 ((t (:inherit outline-5 :height 1.3))))
  (org-level-6 ((t (:inherit outline-5 :height 1.2))))
  (org-level-7 ((t (:inherit outline-5 :height 1.1))))
  (org-agenda-date-today ((t (:height 1.3))))
  :custom
  (org-directory "~/org-roam/")
  (org-todo-keywords
   '((sequence
      "TODO(t)"  ; A task that needs doing & is ready to do
      "PROJ(p)"  ; A project, which usually contains other tasks
      "LOOP(r)"  ; A recurring task
      "STRT(s)"  ; A task that is in progress
      "WAIT(w)"  ; Something external is holding up this task
      "HOLD(h)"  ; This task is paused/on hold because of me
      "IDEA(i)"  ; An unconfirmed and unapproved task or notion
      "|"
      "DONE(d)"  ; Task successfully completed
      "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
     (sequence
      "[ ](T)"   ; A task that needs doing
      "[-](S)"   ; Task is in progress
      "[?](W)"   ; Task is being held up or paused
      "|"
      "[X](D)")  ; Task was completed
     (sequence
      "|"
      "OKAY(o)"
      "YES(y)"
      "NO(n)")))
  (org-capture-templates ;; need to rework this since my agenda structure changed
   '(("t" "Todo" entry (file "~/org-roam/agenda-inbox.org")
      "* TODO %?\n %a")))
  ;; =========== org agenda ===========
  (org-agenda-files (list (expand-file-name "agenda.org" org-roam-directory)(expand-file-name "agenda-inbox.org" org-roam-directory)))
  (org-agenda-prefix-format ;; format at which tasks are displayed
   '((agenda . " %i ")
     (todo . "%c %-12:c")
     (tags . "%c %-12:c")
     (search . "%c %-12:c")))
  (org-agenda-category-icon-alist ;; icons for categories
   `(("tech" ,(list (nerd-icons-mdicon "nf-md-laptop" :height 0.8)) nil nil :ascent center)
     ("school" ,(list (nerd-icons-mdicon "nf-md-school" :height 0.8)) nil nil :ascent center)
     ("personal" ,(list (nerd-icons-mdicon "nf-md-drama_masks" :height 0.8)) nil nil :ascent center)))
  (org-agenda-include-all-todo nil)
  (org-agenda-start-day "+0d")
  (org-agenda-span 3)
  (org-agenda-hide-tags-regexp ".*")
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-columns-add-appointments-to-effort-sum t)
  ;; (org-agenda-custom-commands nil)
  (org-agenda-default-appointment-duration 60)
  (org-agenda-mouse-1-follows-link t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-use-time-grid nil)
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (org-refile-use-outline-path nil)
  (org-archive-location (expand-file-name "agenda-archive.org::" org-roam-directory))
  (org-insert-heading-respect-content nil)
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t)
  (org-pretty-entities t)
  (org-startup-with-inline-images t)
  (org-cycle-inline-images-display t)
  (org-display-remote-inline-images 'download)
  (org-image-actual-width nil)
  (org-list-allow-alphabetical t)
  (org-ellipsis " •")
  (org-agenda-window-setup 'current-window)
  (org-fontify-quote-and-verse-blocks t)
  (org-agenda-block-separator 8411)
  (org-preview-latex-image-directory (concat user-share-emacs-directory "org/lateximg/"))
  (org-preview-latex-default-process 'dvisvgm)
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  (org-return-follows-link t)
  (org-id-locations-file (concat user-share-emacs-directory "org/.org-id-locations"))
  (org-export-backends (quote (ascii html icalendar latex odt md)))
  (org-tags-column 0)
  (org-babel-load-languages '((emacs-lisp . t) (shell . t)))
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-export-preserve-breaks t)
  ;; (org-export-with-properties t)
  (org-startup-folded 'overview)
  :config
  (add-to-list 'display-buffer-alist
               '("*Agenda Commands*"
                 (display-buffer-at-bottom)
                 (window-height . 12)))
  (add-to-list 'display-buffer-alist
               '("*Org Select*"
                 (display-buffer-at-bottom)
                 (window-height . 12)))
  (add-to-list 'display-buffer-alist
               '("*Org Links*"
                 (display-buffer-at-bottom)
                 (window-height . 1)))
  (add-to-list 'display-buffer-alist
               '("*Org Babel Results*"
                 (display-buffer-at-bottom)))

  ;; My attempt to create new time keyword STARTED
  ;; which would signify the time at which somehting was started
  ;; (defvar org-started-string "STARTED:"
  ;;   "String to mark started entries.")
  ;; (defconst org-element-started-keyword "STARTED:"
  ;;   "Keyword used to mark started TODO entries.")
  ;; (defconst org-started-time-regexp
  ;;   (concat "\\<" org-started-string " *\\[\\([^]]+\\)\\]")
  ;;   "Matches the STARTED keyword together with a time stamp.")
  ;; (defcustom org-started-keep-when-no-todo nil
  ;;   "Remove STARTED: time-stamp when switching back to a non-todo state?"
  ;;   :group 'org-todo
  ;;   :group 'org-keywords
  ;;   :version "24.4"
  ;;   :package-version '(Org . "8.0")
  ;;   :type 'boolean)
  ;; (defconst org-all-time-keywords
  ;;   (mapcar (lambda (w) (substring w 0 -1))
  ;;           (list org-scheduled-string org-deadline-string
  ;;                 org-clock-string org-closed-string org-started-string))
  ;;   "List of time keywords.")
  ;; (defconst org-keyword-time-regexp
  ;;   (concat "\\<"
  ;;           (regexp-opt
  ;;            (list org-scheduled-string org-deadline-string org-closed-string
  ;;                  org-clock-string org-started-string)
  ;;            t)
  ;;           " *[[<]\\([^]>]+\\)[]>]")
  ;;   "Matches any of the 5 keywords, together with the time stamp.")

  (defun custom/org-resize-latex-overlays ()
    "It rescales all latex preview fragments correctly with the text size as you zoom text. It's fast, since no image regeneration is required."
    (cl-loop for o in (car (overlay-lists))
             if (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay)
             do (plist-put (cdr (overlay-get o 'display))
                           :scale (expt text-scale-mode-step
                                        text-scale-mode-amount))))
  (plist-put org-format-latex-options :foreground nil)
  (plist-put org-format-latex-options :background nil)

  (defvar custom/org-bold-symbol "*"
    "Default symbol for `custom/org-format-in-region' function.")

  (defun custom/org-format-in-region (&optional symbol)
    "Add symbols before and after the selected text."
    (interactive)
    (setq symbol (or symbol
                     (read-string "Enter symbol: " custom/org-bold-symbol)))
    (when (region-active-p)
      (save-excursion
        (goto-char (region-end))
        (insert symbol)
        (goto-char (region-beginning))
        (insert symbol)))
    (deactivate-mark)))

(defun custom/org-insert-heading-or-item-and-switch-to-insert-state-advice (orig-func &rest args)
  "Advice function to run org-insert-heading-respect-content or org-ctrl-c-ret and switch to insert state in the background."
  (let ((result (apply orig-func args)))
    (when (and (evil-normal-state-p) (derived-mode-p 'org-mode))
      (evil-insert-state))
    result))

(advice-add 'org-insert-heading-respect-content :around #'custom/org-insert-heading-or-item-and-switch-to-insert-state-advice)
(advice-add 'org-ctrl-c-ret :around #'custom/org-insert-heading-or-item-and-switch-to-insert-state-advice)
#+end_src
** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :demand
  :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
(defvar real-theme nil
  "It represents theme to load at startup.\nIt will be loaded st startup with `load-theme' and restarted with SPC-h-r-t.")

(setq real-theme 'doom-dracula) ;; NOTE THIS IS WHERE YOU SHOULD SET YOUR THEME
(load-theme real-theme t)
#+end_src
** Which-key
Which-key seems to take a lot of time to load so I lazy-load it.
#+begin_src emacs-lisp
(use-package which-key
  ;; :defer 10
  :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-side-window-slot -10)
    (which-key-side-window-max-height 0.25)
    (which-key-idle-delay 0.8)
    (which-key-max-description-length nil)
    (which-key-allow-imprecise-window-fit nil)
    (which-key-separator "  ")
    (which-key-idle-delay 0.5)
  :config
    (which-key-mode 1))
#+end_src
** Window/buffer management
*** Buffer-move
This allows to easily move windows (splits) around.
#+begin_src emacs-lisp
(use-package buffer-move)
#+end_src
*** Window close functions
These functions move to window on specified side and close it
#+begin_src emacs-lisp
(defun custom/close-down-window ()
  "Goes down the window and closes it"
  (interactive)
  (evil-window-down 1)
  (evil-window-delete))

(defun custom/close-up-window ()
  "Goes up the window and closes it"
  (interactive)
  (evil-window-up 1)
  (evil-window-delete))

(defun custom/close-left-window ()
  "Goes left the window and closes it"
  (interactive)
  (evil-window-left 1)
  (evil-window-delete))

(defun custom/close-right-window ()
  "Goes right the window and closes it"
  (interactive)
  (evil-window-right 1)
  (evil-window-delete))
#+end_src
